% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot3.R
\name{plot3}
\alias{plot3}
\alias{plot3.default}
\alias{plot3.grouped_df}
\alias{plot3.ggplot}
\alias{plot3.sf}
\title{Plotting functions}
\usage{
plot3(
  .data,
  type = "column",
  x = NULL,
  y = NULL,
  category = NULL,
  facet = NULL,
  title = NULL,
  subtitle = NULL,
  tag = NULL,
  caption = NULL,
  bins = NULL,
  category.focus = NULL,
  category.sort = TRUE,
  colour = getOption("plot2.colours", "certe"),
  colour.extended_spectrum = FALSE,
  colour.fill = NULL,
  colour.opacity = 0,
  datalabels = TRUE,
  datalabels.fill = "white",
  datalabels.round = if_else(y.percent, 1, 2),
  datalabels.size = 3,
  decimal_comma = uses_decimal_comma(),
  facet.bold = TRUE,
  facet.drop = FALSE,
  facet.fill = NULL,
  facet.fixed_y = FALSE,
  facet.italic = FALSE,
  facet.margin = 8,
  facet.nrow = NULL,
  facet.position = "top",
  facet.relative = FALSE,
  facet.repeat_lbls_x = TRUE,
  facet.repeat_lbls_y = TRUE,
  facet.size = 10,
  facet.sort = TRUE,
  horizontal = FALSE,
  jitter_seed = 1,
  legend.barheight = 5,
  legend.barwidth = 1,
  legend.italic = FALSE,
  legend.position = "top",
  legend.reverse = NULL,
  legend.title = "",
  linetype = 1,
  markdown = TRUE,
  na.replace = "(onbekend)",
  na.rm = FALSE,
  print = FALSE,
  reverse = horizontal,
  size = ifelse(type \%in\% c("point", "jitter", "boxplot", "violin"), 2, 0.75),
  stacked = FALSE,
  stackedpercent = FALSE,
  subtitle.maxlength = 60,
  summarise_function = base::sum,
  text.factor = 1,
  text.font_family = "Calibri",
  theme = theme_minimal2(),
  title.maxlength = 60,
  width = ifelse(type \%in\% c("jitter", "boxplot", "violin"), 0.75, 0.5),
  x.date_breaks = "1 day",
  x.date_labels = "d mmm",
  x.expand = 0.5,
  x.lbl_align = NULL,
  x.lbl_angle = 0,
  x.lbl_italic = FALSE,
  x.limits = NULL,
  x.max_items = Inf,
  x.max_txt = "(rest, x{n})",
  x.position = "bottom",
  x.remove = FALSE,
  x.sort = TRUE,
  x.title = NULL,
  y.24h = FALSE,
  y.age = FALSE,
  y.breaks = NULL,
  y.expand = 0.25,
  y.labels = NULL,
  y.limits = NULL,
  y.percent = FALSE,
  y.percent_break = 10,
  y.position = "left",
  y.remove = FALSE,
  y.title = NULL,
  y.trans = "identity",
  ...
)

\method{plot3}{default}(
  x,
  y = NULL,
  type = "p",
  xlim = NULL,
  ylim = NULL,
  log = "",
  main = NULL,
  sub = NULL,
  xlab = NULL,
  ylab = NULL,
  ann = par("ann"),
  axes = TRUE,
  frame.plot = axes,
  panel.first = NULL,
  panel.last = NULL,
  asp = NA,
  xgap.axis = NA,
  ygap.axis = NA,
  ...
)

\method{plot3}{grouped_df}(.data, ..., category = NULL)

\method{plot3}{ggplot}(plot, type, ...)

\method{plot3}{sf}(
  .data,
  ...,
  datalabels = FALSE,
  legend.position = "right",
  colour = "grey50",
  y.expand = 0,
  x.expand = 0
)
}
\arguments{
\item{type}{1-character string giving the type of plot desired.  The
    following values are possible, for details, see \code{\link[graphics]{plot}}:
    \code{"p"} for points, \code{"l"} for lines,
    \code{"b"} for both points and lines,
    \code{"c"} for empty points joined by lines,
    \code{"o"} for overplotted points and lines,
    \code{"s"} and \code{"S"} for stair steps and
    \code{"h"} for histogram-like vertical lines.  Finally,
    \code{"n"} does not produce any points or lines.}

\item{x}{the \code{x} and \code{y} arguments provide the x and y
    coordinates for the plot.  Any reasonable way of defining the
    coordinates is acceptable.  See the function \code{\link{xy.coords}}
    for details.  If supplied separately, they must be of the same length.}

\item{y}{the \code{x} and \code{y} arguments provide the x and y
    coordinates for the plot.  Any reasonable way of defining the
    coordinates is acceptable.  See the function \code{\link{xy.coords}}
    for details.  If supplied separately, they must be of the same length.}

\item{...}{other \link[graphics]{graphical parameters} (see \code{\link[graphics]{par}} and
    section \sQuote{Details} below).}

\item{xlim}{the x limits (x1, x2) of the plot.  Note that \code{x1 > x2}
    is allowed and leads to a \sQuote{reversed axis}.

    The default value, \code{NULL}, indicates that the range of the
    \link{finite} values to be plotted should be used.}

\item{ylim}{the y limits of the plot.}

\item{log}{a character string which contains \code{"x"} if the x axis
    is to be logarithmic, \code{"y"} if the y axis is to be logarithmic
    and \code{"xy"} or \code{"yx"} if both axes are to be logarithmic.}

\item{main}{a main title for the plot, see also \code{\link[graphics]{title}}.}

\item{sub}{a sub title for the plot.}

\item{xlab}{a label for the x axis, defaults to a description of \code{x}.}

\item{ylab}{a label for the y axis, defaults to a description of \code{y}.}

\item{ann}{a logical value indicating whether the default annotation
    (title and x and y axis labels) should appear on the plot.}

\item{axes}{a logical value indicating whether both axes should be drawn on
    the plot.  Use \link[graphics]{graphical parameter} \code{"xaxt"} or \code{"yaxt"}
    to suppress just one of the axes.}

\item{frame.plot}{a logical indicating whether a box should be drawn
    around the plot.}

\item{panel.first}{an \sQuote{expression} to be evaluated after the
    plot axes are set up but before any plotting takes place.  This can
    be useful for drawing background grids or scatterplot smooths.  Note
    that this works by lazy evaluation: passing this argument from other
    \code{plot} methods may well not work since it may be evaluated too
    early.}

\item{panel.last}{an expression to be evaluated after plotting has
    taken place but before the axes, title and box are added.  See the
    comments about \code{panel.first}.}

\item{asp}{the \eqn{y/x} aspect ratio, see \code{\link[graphics]{plot.window}}.}

\item{xgap.axis}{the \eqn{x/y} axis gap factors, passed as
    \code{gap.axis} to the two \code{\link[graphics]{axis}()} calls (when
    \code{axes} is true, as per default).}

\item{ygap.axis}{the \eqn{x/y} axis gap factors, passed as
    \code{gap.axis} to the two \code{\link[graphics]{axis}()} calls (when
    \code{axes} is true, as per default).}
}
\description{
text text
}
\details{
The \code{\link[=plot3]{plot3()}} function uses the \code{ggplot2} package for plotting and provides:
\itemize{
\item A convenient wrapper around many \code{ggplot2} functions such as \code{\link[=ggplot]{ggplot()}}, \code{\link[=geom_col]{geom_col()}}, \code{\link[=facet_wrap]{facet_wrap()}}, \code{\link[=labs]{labs()}}, etc.
\item Writing as few lines of codes as possible
\item A drop-in replacement for most \code{\link[=plot]{plot()}} calls
\item Benefits from Excel: the y axis starts at 0, the y scale contains extra space to read all data points, date breaks can be written in a readable format such as "d mmm yyyy", and data labels can easily be printed
\item Easy plotting in three 'directions': \code{x} (the regular x axis), \code{category} (replaces 'fill' and 'colour') and \code{facet}
\item Easy way for sorting data in may ways (such as on alphabet, numeric value, frequency, original data order), by setting a single argument for the 'direction': \code{x.sort}, \code{category.sort} and \code{facet.sort}
\item Easy limiting values for \code{x} by setting \verb{code\{x.max_items}
\item Markdown support for any label, with any theme
\item An extra clean, minimalistic theme with a lot of whitespace that is ideal for printing
}

The \code{\link[=plot3]{plot3()}} function is arguably what the \code{\link[=qplot]{qplot()}} function of the \code{ggplot2} package could have been.
}
\section{Comparison with the \code{ggplot2} package}{


The \code{ggplot2} package provides a wide range of functions for very advanced plotting, but it lacks convenience for simple plotting. For example, a common data set could look like this:\preformatted{df
#>   carmodel            mpg
#>   <chr>             <dbl>
#> 1 Mazda RX4          21.0
#> 2 Mazda RX4 Wag      21.0
#> 3 Datsun 710         22.8
#> 4 Hornet 4 Drive     21.4
}

The \code{ggplot2} package sets no default for plotting types, requiring you to type at least:\preformatted{ggplot(df) +
  geom_col(aes(x = carmodel, y = mpg))
}

That's a lot of code containing three functions for something so obvious. Any addition (labels, scales, etc.) would require you to write more functions and their parameters. The \code{\link[=plot3]{plot3()}} function guesses what you want to do and contains many parameters to alter your plots. In other words, the \code{ggplot2} package requires you to write many functions and parameters for plotting, the \code{\link[=plot3]{plot3()}} function only requires you to write the parameters that are not already set:\preformatted{df \%>\%
  plot3()
}

Moreover, the \code{ggplot2} package requires a \link{data.frame} as input or forces input to a \link{data.frame}. The \code{\link[=plot3]{plot3()}} function uses S3 classes for extensions, allowing \code{base} \code{\link[=plot]{plot()}} users to change their plots to \code{ggplot2} plots by literally adding one number to the function they are calling. And \code{\link[=plot3]{plot3()}} functions are even extendible with new \code{\link[=plot3]{plot3()}} functions and with other packages.
}

\section{Working with the three 'directions'}{

}

