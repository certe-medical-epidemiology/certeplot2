% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/add_type.R
\name{add_type}
\alias{add_type}
\alias{add_line}
\alias{add_point}
\alias{add_col}
\alias{add_errorbar}
\alias{add_sf}
\title{Add Plot Element}
\usage{
add_type(plot, type = NULL, mapping = aes(), ...)

add_line(
  plot,
  y = NULL,
  x = NULL,
  group = 1,
  colour = "certeblauw",
  geom_type = NULL,
  linetype,
  linewidth,
  ...,
  inherit.aes = TRUE
)

add_point(
  plot,
  y = NULL,
  x = NULL,
  group = 1,
  colour = "certeblauw",
  size,
  shape,
  ...,
  inherit.aes = TRUE
)

add_col(
  plot,
  y = NULL,
  x = NULL,
  colour = "certeblauw",
  colour_fill = "certeblauw",
  width,
  ...,
  inherit.aes = TRUE
)

add_errorbar(
  plot,
  min = NULL,
  max = NULL,
  y = NULL,
  x = NULL,
  colour = "certeroze",
  width = 0.5,
  ...,
  inherit.aes = TRUE
)

add_sf(
  plot,
  sf_data,
  colour = "certeblauw",
  colour_fill = "certeblauw",
  size = 2,
  linewidth = 0.1,
  datalabels = NULL,
  datalabels.colour = colour,
  datalabels.size = 3,
  datalabels.angle = 0,
  datalabels.font = getOption("plot2.font"),
  datalabels.nudge_y = 2500,
  ...,
  inherit.aes = FALSE
)
}
\arguments{
\item{plot}{a \code{ggplot2} plot}

\item{type}{a \code{ggplot2} geom name, all geoms are supported. Full function names can be used (e.g., \code{"geom_line"}), but they can also be abbreviated (e.g., \code{"l"}, \code{"line"}). These geoms can be abbreviated by their first character: area (\code{"a"}), boxplot (\code{"b"}), column (\code{"c"}), histogram (\code{"h"}), jitter (\code{"j"}), line (\code{"l"}), point (\code{"p"}), ribbon (\code{"r"}), violin (\code{"v"}).}

\item{mapping}{a mapping created with \code{\link[ggplot2:aes]{aes()}} to pass on to the geom}

\item{x, y}{aesthetic arguments}

\item{group, linetype, linewidth, shape, size, width, ...}{arguments passed on to the geom}

\item{colour, colour_fill}{colour of the line or column, will be evaluated with \code{\link[certestyle:colourpicker]{certestyle::colourpicker()}}. If \code{colour_fill} is missing but \code{colour} is given, \code{colour_fill} will inherit the colour set with \code{colour}.}

\item{geom_type}{type of line, can be "vline" or "hline" to force the type of line}

\item{inherit.aes}{a \link{logical} to indicate whether the default aesthetics should be inherited, rather than combining with them}

\item{min, max}{minimum (lower) and maximum (upper) values of the error bars}

\item{sf_data}{an 'sf' \link{data.frame}, such as the outcome of \code{\link[certegis:geocoding]{certegis::geocode()}}}

\item{datalabels}{a column of \code{sf_data} to add as label below the points}

\item{datalabels.colour, datalabels.size, datalabels.angle, datalabels.font}{properties of \code{datalabels}}

\item{datalabels.nudge_y}{is \code{datalabels} is not \code{NULL}, the amount of vertical adjustment of the datalabels (positive value: more to the North, negative value: more to the South)}
}
\description{
Quickly add a new 'geom' to an existing \code{plot2}/\code{ggplot} model. Like \code{\link[=plot2]{plot2()}}, they support tidy evaluation, meaning that variables can be unquoted. They can be added using the pipe (new base \R \verb{|>} or tidyverse \verb{\%>\%}).
}
\details{
The function \code{\link[=add_line]{add_line()}} will add:
\itemize{
\item \code{\link[ggplot2:geom_abline]{geom_hline()}} if only \code{y} is provided and \code{y} contains one unique value;
\item \code{\link[ggplot2:geom_abline]{geom_vline()}} if only \code{x} is provided and \code{x} contains one unique value;
\item \code{\link[ggplot2:geom_path]{geom_line()}} in all other cases.
}

The function \code{\link[=add_errorbar]{add_errorbar()}} only adds error bars to the \code{y} values, see \emph{Examples}.
}
\examples{
df <- data.frame(var_1 = c(1:100),
                 var_2 = rnorm(100, 100, 25))
df |>
  plot2() |> 
  add_line(mean(var_2))
  
df |>
  plot2() |> 
  add_line(y = mean(var_2), 
           linewidth = 2,
           linetype = 3) |>
  add_col(y = var_2 / 5,
          width = 0.25,
          colour = "certeroze")
       
if (require("dplyr", warn.conflicts = FALSE)) {   
  df2 <- df |> 
    as_tibble() |> 
    filter(var_1 <= 50) |> 
    mutate(error1 = var_2 * 0.9,
           error2 = var_2 * 1.1)
  
  print(df2)
  
  df2 |> 
    plot2(type = "c", colour = "certeroze4") |> 
    # add the error bars, simply by referencing the lower and upper values
    add_errorbar(error1, error2)
}

if (require("certestats", warn.conflicts = FALSE)) {
   df |>
     plot2() |> 
     add_line(y = ewma(var_2, 0.75),
              colour = "certeroze",
              linewidth = 1)
}

if (require("certegis")) {
  hospitals <- geocode(c("Martini Ziekenhuis",
                         "Medisch Centrum Leeuwarden",
                         "Tjongerschans Heerenveen",
                         "Treant Emmen"))
  geo_gemeenten |>
    crop_certe() |>
    plot2(datalabels = FALSE,
          category.title = "Inhabitants",
          colour_fill = c("white", "certeblauw2")) |>
    add_sf(hospitals,
           colour = "certeroze",
           datalabels = place) |> 
    add_sf(geo_provincies |> crop_certe(),
           colour_fill = NA,
           colour = "certeblauw",
           linetype = 2,
           linewidth = 0.5)
}
}
