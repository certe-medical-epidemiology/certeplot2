% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot2.R
\name{plot2}
\alias{plot2}
\title{Conveniently Create a New \code{ggplot}}
\usage{
plot2(
  .data,
  x = NULL,
  y = NULL,
  category = NULL,
  facet = NULL,
  type = NULL,
  x.title = NULL,
  y.title = NULL,
  category.title = NULL,
  title = NULL,
  subtitle = NULL,
  caption = NULL,
  tag = NULL,
  title.linelength = 60,
  title.colour = "black",
  subtitle.linelength = 60,
  subtitle.colour = "grey35",
  na.replace = "(??)",
  na.rm = FALSE,
  facet.position = "top",
  facet.fill = NULL,
  facet.bold = TRUE,
  facet.italic = FALSE,
  facet.size = 10,
  facet.margin = 8,
  facet.repeat_lbls_x = TRUE,
  facet.repeat_lbls_y = FALSE,
  facet.fixed_y = FALSE,
  facet.drop = FALSE,
  facet.nrow = NULL,
  facet.relative = FALSE,
  x.date_breaks = NULL,
  x.date_labels = NULL,
  category.focus = NULL,
  colour = "certe",
  colour_fill = NULL,
  x.lbl_angle = 0,
  x.lbl_align = NULL,
  x.lbl_italic = FALSE,
  x.remove = FALSE,
  x.position = "bottom",
  x.max_items = Inf,
  x.max_txt = "(rest, x \%n)",
  category.max_items = Inf,
  category.max_txt = "(rest, x \%n)",
  facet.max_items = Inf,
  facet.max_txt = "(rest, x \%n)",
  x.breaks = NULL,
  x.breaks_n = NULL,
  x.trans = "identity",
  x.expand = 0.5,
  x.limits = NULL,
  x.character = NULL,
  y.remove = FALSE,
  y.24h = FALSE,
  y.age = FALSE,
  y.percent = FALSE,
  y.percent_break = 0.1,
  y.breaks = NULL,
  y.limits = NULL,
  y.labels = NULL,
  y.expand = 0.25,
  y.trans = "identity",
  y.position = "left",
  category.labels = NULL,
  category.percent = FALSE,
  category.breaks = NULL,
  category.limits = NULL,
  category.expand = 0,
  category.midpoint = NULL,
  category.trans = "identity",
  x.sort = NULL,
  category.sort = TRUE,
  facet.sort = TRUE,
  datalabels = TRUE,
  datalabels.round = ifelse(y.percent, 2, 1),
  datalabels.format = "\%n",
  datalabels.colour = "grey25",
  datalabels.fill = NULL,
  datalabels.size = (3 * text_factor),
  datalabels.angle = 0,
  decimal.mark = ",",
  big.mark = ifelse(decimal.mark == ",", ".", ","),
  summarise_function = base::sum,
  stacked = FALSE,
  stackedpercent = FALSE,
  horizontal = FALSE,
  reverse = horizontal,
  smooth = NULL,
  smooth.method = NULL,
  smooth.formula = NULL,
  smooth.se = TRUE,
  smooth.level = 0.95,
  smooth.alpha = 0.15,
  smooth.size = 0.75,
  smooth.linetype = 3,
  size = NULL,
  linetype = 1,
  binwidth = NULL,
  width = NULL,
  jitter_seed = NA,
  violin_scale = "count",
  legend.position = "top",
  legend.title = NULL,
  legend.reverse = FALSE,
  legend.barheight = 6,
  legend.barwidth = 1.5,
  legend.nbin = 300,
  legend.italic = FALSE,
  zoom = FALSE,
  sep = " / ",
  print = FALSE,
  text_factor = 1,
  family = getOption("plot2.family"),
  theme = getOption("plot2.theme", "theme_minimal2"),
  markdown = TRUE,
  taxonomy_italic = FALSE,
  x.category = NULL,
  y.category = NULL,
  ...
)
}
\arguments{
\item{.data}{data to plot}

\item{x}{plotting 'direction': the x axis}

\item{y}{values to use for plotting along the y axis, can also be a calculation of a variable, e.g. \code{max(column1)} or \code{length(unique(person_id))}}

\item{category}{plotting 'direction': the category (called 'fill' and 'colour' in \code{ggplot2})}

\item{facet}{plotting 'direction': the facet}

\item{type}{type of visualisation to use. This can be:
\itemize{
\item A \code{ggplot2} geom name, all geoms are supported. Full function names can be used (e.g., \code{"geom_histogram"}), but they can also be abbreviated (e.g., \code{"h"}, \code{"hist"}). These geoms can be abbreviated by their first character: area (\code{"a"}), boxplot (\code{"b"}), column (\code{"c"}), histogram (\code{"h"}), jitter (\code{"j"}), line (\code{"l"}), point (\code{"p"}), ribbon (\code{"r"}), violin (\code{"v"}). \strong{Please note:} in \code{ggplot2}, 'bars' and 'columns' are equal, while it is common to many people that 'bars' are oriented horizontally and 'columns' are oriented vertically. For this reason, \code{type = "bar"} will set \code{type = "col"} and \code{horizontal = TRUE}.
\item A shortcut. There is currently one supported shortcut: \code{"barpercent"}, which will set \code{type = "col"} and \code{horizontal = TRUE} and \code{x.max_items = 10} and \code{x.sort = "freq-desc"} and \code{datalabels.format = "\%n (\%p)"}.
\item Left blank. In this case, the type will be determined automatically: \code{"boxplot"} if there is no X axis or if the length of unique values per X axis item is at least 3, \code{"point"} if both the Y and X axes are numeric, and \code{"col"} otherwise.
}}

\item{x.title}{text to show on the x axis}

\item{y.title}{text to show on the y axis}

\item{category.title}{text to show for the category (legend title)}

\item{title}{title to show}

\item{subtitle}{subtitle to show}

\item{caption}{caption to show}

\item{tag}{tag to show}

\item{title.linelength}{maximum number of characters per line in the title, before a linebreak occurs}

\item{title.colour}{text colour of the title}

\item{subtitle.linelength}{maximum number of characters per line in the subtitle, before a linebreak occurs}

\item{subtitle.colour}{text colour of the subtitle}

\item{na.replace}{character to put in place of \code{NA} values if \code{na.rm = FALSE}}

\item{na.rm}{remove \code{NA} values from showing in the plot}

\item{facet.position, facet.fill, facet.bold, facet.italic, facet.size, facet.margin, facet.repeat_lbls_x, facet.repeat_lbls_y, facet.fixed_y, facet.drop, facet.nrow, facet.relative}{settings for the plotting direction \code{facet}}

\item{x.date_breaks}{breaks to use when the x axis contains dates, will be determined automatically if left blank}

\item{x.date_labels}{labels to use when the x axis contains dates, will be determined automatically if left blank}

\item{category.focus}{a value of \code{category} that should be highlighted, meaning that all other values in \code{category} will be greyed out. This can also be a numeric value between 1 and the length of unique values of \code{category}, e.g. \code{category.focus = 2} to focus on the second legend item.}

\item{colour}{colour(s) to set, will be evaluated with \code{\link[certestyle:colourpicker]{colourpicker()}} and defaults to Certe colours. This can be a named vector to match values of \code{category}, see \emph{Examples}. Using a named vector can also be used to manually sort the values of \code{category}.}

\item{colour_fill}{colour(s) to be used for filling, will be determined automatically if left blank and will be evaluated with \code{\link[certestyle:colourpicker]{colourpicker()}}}

\item{x.lbl_angle}{angle to use for the x axis in a counter-clockwise direction (i.e., a value of \code{90} will orient the axis labels from bottom to top, a value of \code{270} will orient the axis labels from top to bottom)}

\item{x.lbl_align}{alignment for the x axis between \code{0} (left aligned) and \code{1} (right aligned)}

\item{x.lbl_italic}{a \link{logical} to indicate whether the x labels should in in \emph{italics}}

\item{x.remove}{a \link{logical} to indicate whether the x labels and title should be removed}

\item{x.position}{position of the x axis, defaults to \code{"bottom"}}

\item{x.max_items, category.max_items, facet.max_items}{number of maximum items to use, defaults to infinite. All other values will be grouped and summarised using the \code{summarise_function} function. \strong{Please note:} the sorting will be applied first, allowing to e.g. plot the top \emph{n} most frequent values of the x axis by combining \code{x.sort = "freq-desc"} with \verb{x.max_items =} \emph{n}.}

\item{x.max_txt, category.max_txt, facet.max_txt}{the text to use of values not included number of \verb{*.max_items}. The placeholder \verb{\%n} will be replaced with the outcome of the \code{summarise_function} function, the placeholder \verb{\%p} will be replaced with the percentage.}

\item{x.breaks}{a breaks function or numeric vector to use for the x axis}

\item{x.breaks_n}{number of breaks to use for the x axis}

\item{x.trans}{a transformation function to use for the x axis, e.g. \code{"log2"}}

\item{x.expand}{expansion to use for the x axis, can be length 1 or 2}

\item{x.limits}{limits to use for the x axis, can be length 1 or 2}

\item{x.character}{a \link{logical} to indicate whether the values of the x axis should be forced to \link{character}. The default is \code{FALSE}, except for years (x values between 2000 and 2050)}

\item{y.remove}{a \link{logical} to indicate whether the y labels and title should be removed}

\item{y.24h}{a \link{logical} to indicate whether the y labels and breaks should be formatted as 24-hour sequences}

\item{y.age}{a \link{logical} to indicate whether the y labels and breaks should be formatted as ages in years}

\item{y.percent}{a \link{logical} to indicate whether the y labels should be formatted as percentages}

\item{y.percent_break}{number of percentages on which the y axis should have breaks}

\item{y.breaks}{a breaks function or numeric vector to use for the y axis}

\item{y.limits}{limits to use for the y axis, can be length 1 or 2}

\item{y.labels}{a labels function or character vector to use for the y axis}

\item{y.expand}{expansion to use for the y axis, can be length 1 or 2}

\item{y.trans}{a transformation function to use for the y axis, e.g. \code{"log2"}}

\item{y.position}{position of the x axis, defaults to \code{"left"}}

\item{category.labels, category.percent, category.breaks, category.limits, category.expand, category.midpoint, category.trans}{settings for the plotting direction \code{category}}

\item{x.sort, category.sort, facet.sort}{sorting of the plotting direction, defaults to \code{TRUE}, except for continuous values on the x axis (such as dates and numbers). Applying one of the sorting methods will transform the values to an ordered \link{factor}, which \code{ggplot2} uses to orient the data. Valid values are:
\itemize{
\item \code{TRUE}: sort as \code{"asc"}
\item \code{FALSE}: sort according to the order in the data
\item \code{NULL}: do not sort/transform at all
\item \code{"asc"} or \code{"alpha"}: sort \link{factor}s on their levels, otherwise sort ascending on alphabet, while maintaining numbers in the text (\emph{numeric} sort)
\item \code{"desc"}: sort \link{factor}s on their \link[=rev]{reversed} levels, otherwise sort descending on alphabet, while maintaining numbers in the text (\emph{numeric} sort)
\item \code{"order"} or \code{"inorder"}: sort as \code{FALSE}
\item \code{"freq"} or \code{"freq-desc"}: sort descending according to the frequencies of \code{y} computed by \code{summarise_function} (highest value first)
\item \code{"freq-asc"}: sort ascending according to the frequencies of \code{y} computed by \code{summarise_function} (lowest value first)
}}

\item{datalabels}{variables or character vector to use as datalabels - if left blank, will take the first character column in 'sf' data, and values of \code{y} otherwise. It will print a maximum of 50 labels at default, which can be enforced by explicitly adding \code{datalabels = TRUE}.}

\item{datalabels.round}{number of digits to round the datalabels}

\item{datalabels.format}{format to use for datalabels - \code{"\%n"} will be replaced by the count number, \code{"\%p"} will be replaced by the percentage of the total count. Use \code{datalabels.format = NULL} to not transform the datalabels.}

\item{datalabels.colour, datalabels.fill, datalabels.size, datalabels.angle}{settings for the datalabels}

\item{decimal.mark}{decimal mark, defaults to Dutch use (a comma)}

\item{big.mark}{thousands separator, defaults to Dutch use (a full stop)}

\item{summarise_function}{a \link{function} to use if the data has to be summarised, see \emph{Examples}}

\item{stacked}{a \link{logical} to indicate that values must be stacked}

\item{stackedpercent}{a \link{logical} to indicate that values must be 100\% stacked}

\item{horizontal}{a \link{logical} to turn the plot 90 degrees using \code{\link[ggplot2:coord_flip]{coord_flip()}}. This option also updates some theme options, so that e.g., \code{x.lbl_italic} will still apply to the original x axis.}

\item{reverse}{a \link{logical} to reverse all values of \code{category}}

\item{smooth}{a \link{logical} to add a smooth. In histograms, this will add the density count as an overlaying line (default: \code{TRUE}). In all other cases, a smooth will be added using \code{\link[ggplot2:geom_smooth]{geom_smooth()}} (default: \code{FALSE}).}

\item{smooth.method, smooth.formula, smooth.se, smooth.level, smooth.alpha, smooth.size, smooth.linetype}{settings for \code{smooth}}

\item{size}{size of the geom}

\item{linetype}{linetype of the geom, only suitable for geoms that draw lines}

\item{binwidth}{width of bins (only useful for \code{geom = "histogram"}), can be specified as a numeric value or as a function that calculates width from \code{x}, see \code{\link[ggplot2:geom_histogram]{geom_histogram()}}. It defaults to approx. \code{diff(range(x))} divided by 12 to 22 based on the data.}

\item{width}{width of the geom}

\item{jitter_seed}{seed (randomisation factor) to be set when using \code{type = "jitter"}}

\item{violin_scale}{scale to be set when using \code{type = "violin"}, can also be set to \code{"area"}}

\item{legend.position, legend.title, legend.reverse, legend.barheight, legend.barwidth, legend.nbin, legend.italic}{settings for the legend}

\item{zoom}{a \link{logical} to indicate if the plot should be scaled to the data, i.e., not having the x and y axes to start at 0}

\item{sep}{separator character to use if multiple columns are given to either of the three directions: \code{x}, \code{category} and \code{facet}, e.g. \code{facet = c(column1, column2)}}

\item{print}{a \link{logical} to indicate if the result should be \link[=print]{printed} instead of just returned}

\item{text_factor}{text factor to use, which will apply to all texts shown in the plot}

\item{family}{font family to use, can be set with \code{options(plot2.family = "...")}}

\item{theme}{a valid \code{ggplot2} \link[ggplot2:theme]{theme} to apply, or \code{NULL} to use the default \code{\link[ggplot2:ggtheme]{theme_grey()}}. This argument accepts themes (e.g., \code{theme_bw()}), functions (e.g., \code{theme_bw}) and characters themes (e.g., \code{"theme_bw"}). Can be set with \code{options(plot2.theme = "...")}.}

\item{markdown}{a \link{logical} to turn all labels and titles into markdown-supported labels, by extending their S3 classes with \code{\link[ggtext:element_markdown]{"element_markdown"}}, a feature of the \code{ggtext} package}

\item{taxonomy_italic}{a \link{logical} to transform all labels and titles into italics that are in the \code{microorganisms} data set of the \code{AMR} package}

\item{x.category}{old argument for \code{facet}, now deprecated}

\item{y.category}{old argument for \code{category}, now deprecated}

\item{...}{arguments passed on to methods}
}
\value{
The \code{\link[=plot2]{plot2()}} function adds new variables to the data for each mapping: any combination of \verb{_var_x}, \verb{_var_y}, \verb{_var_category}, \verb{_var_facet} and \verb{_var_datalabels}. These columns are internally set as mapping using \code{\link[ggplot2:aes]{aes()}}.
}
\description{
The \code{\link[=plot2]{plot2()}} function is a convenient wrapper around many \code{\link[ggplot2:ggplot]{ggplot2}} functions. By design, the \code{ggplot2} package requires users to use a lot of functions, while the \code{\link[=plot2]{plot2()}} function auto-determines needs and only requires to define arguments in one single function.

See \link{plot2-methods} for all implemented methods for different object classes.
}
\details{
The \code{\link[=plot2]{plot2()}} function is a convenient wrapper around many \code{\link[ggplot2:ggplot]{ggplot2}} functions such as \code{\link[ggplot2:ggplot]{ggplot()}}, \code{\link[ggplot2:aes]{aes()}}, \code{\link[ggplot2:geom_bar]{geom_col()}}, \code{\link[ggplot2:facet_wrap]{facet_wrap()}}, \code{\link[ggplot2:labs]{labs()}}, etc., and provides:
\itemize{
\item Writing as few lines of codes as possible
\item Easy plotting in three 'directions': \code{x} (the regular x axis), \code{category} (replaces 'fill' and 'colour') and \code{facet}
\item Automatic setting of these 'directions' based on the input data
\item Easy way for sorting data in many ways (such as on alphabet, numeric value, frequency, original data order), by setting a single argument for the 'direction': \code{x.sort}, \code{category.sort} and \code{facet.sort}
\item Easy limiting values, e.g. by setting \code{x.max_items = 5} or \code{category.max_items = 5}
\item Markdown support for any label, with any theme
\item An extra clean, minimalistic theme with a lot of whitespace (but without unnecessary margins) that is ideal for printing: \code{\link[=theme_minimal2]{theme_minimal2()}}
\item Some conveniences from Microsoft Excel:
\itemize{
\item The y axis starts at 0 if possible
\item The y scale expands at the top to be better able to interpret all data points
\item Date breaks can be written in a human-readable format (such as "d mmm yyyy")
\item Labels with data values can easily be printed and are automatically determined
}
\item Support for any \code{ggplot2} extension based on \code{\link[ggplot2:fortify]{ggplot2::fortify()}}
}

The \code{ggplot2} package in conjunction with the \code{tidyr}, \code{forcats} and \code{cleaner} packages can provide above functionalities, but the goal of the \code{\link[=plot2]{plot2()}} function is to generalise this into one function. The generic \code{\link[=plot2]{plot2()}} function currently has 119 arguments, all with a default value. \strong{Less typing, faster coding.}
}
\examples{
head(iris)

# no variables determined, so plot2() will try for itself -
# the type will be points since the first two variables are numeric
plot2(iris)
plot2(iris, theme = NULL, legend.position = "r")

# only view the data part, like ggplot2 normally does
plot2(iris, zoom = TRUE)

# if x and y are set, no addition mapping will be set:
plot2(iris, Sepal.Width, Sepal.Length)
plot2(iris, Species, Sepal.Length)

# the arguments are in this order: x, y, category, facet
plot2(iris, Sepal.Length, Sepal.Width, Petal.Length, Species)

plot2(iris, Sepal.Length, Sepal.Width, Petal.Length, Species,
      colour = "viridis") # set the viridis colours
      
plot2(iris, Sepal.Length, Sepal.Width, Petal.Length, Species,
      colour = c("white", "red", "black")) # set own colours
      
plot2(iris, Sepal.Length, Sepal.Width, Petal.Length, Species,
      colour = c("white", "red", "black"), # set own colours
      category.midpoint = 3)               # with an own midpoint

# change to any type
plot2(iris, Species, Sepal.Length, type = "violin")

library(dplyr, warn.conflicts = FALSE)
  
admitted_patients

# if there are more Y values than groups, the default will be boxplot
admitted_patients \%>\%
  plot2(x = hospital)

# the arguments are in this order: x, y, category, facet
admitted_patients \%>\%
  plot2(hospital, age, gender)
  
admitted_patients \%>\%
  plot2(hospital, age, gender, ward)
  
# use summarise_function to apply a function for continuous data
admitted_patients \%>\%
  plot2(hospital, age, gender, ward,
        type = "col", summarise_function = median)

admitted_patients \%>\%
  plot2(x = hospital,
        category = gender,
        colour = c("F" = "orange3", "M" = "purple3"),
        colour_fill = "white",
        y.age = TRUE)
        
admitted_patients \%>\%
  plot2(age, type = "hist")
admitted_patients \%>\%
  plot2(age, type = "density")
 
# the default type is column, datalabels are automatically
# set in non-continuous types:
patients_per_hospital_gender <- admitted_patients \%>\%
  count(hospital, gender)
  
patients_per_hospital_gender
  
patients_per_hospital_gender \%>\%
  plot2()
  
patients_per_hospital_gender \%>\%
  plot2(stacked = TRUE)
  
patients_per_hospital_gender \%>\%
  plot2(stackedpercent = TRUE)
  
# sort any direction
patients_per_hospital_gender \%>\%
  plot2(category.sort = "desc")
  
patients_per_hospital_gender \%>\%
  plot2(category.sort = "desc",
        x.sort = "freq-asc",
        stacked = TRUE)

# plot2() supports all S3 extensions available through ggplot2::fortify():
mtcars \%>\% 
  lm(mpg ~ hp, data = .) \%>\% 
  plot2(x = mpg ^ -3,
        y = hp ^ 2,
        smooth = TRUE,
        mooth.method = "lm",
        smooth.formula = "y ~ log(x)",
        title = "Titles/captions *support* **markdown**",
        subtitle = "Axis titles contain the square notation: ^2")
        
# sf objects (geographic plots, 'simple features') are also supported
if (require("sf")) {
  netherlands \%>\% 
    plot2(datalabels = TRUE)
}

# Antimicrobial Resistance (AMR) data analysis requires the `AMR` package:
if (require("AMR")) {
  example_isolates \%>\% 
    select(mo, penicillins()) \%>\% 
    bug_drug_combinations(FUN = mo_gramstain) \%>\%
    plot2(y.percent_break = 0.25)
}
}
