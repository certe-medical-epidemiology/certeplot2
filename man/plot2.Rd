% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot2.R
\name{plot2}
\alias{plot2}
\title{Conveniently Create a New \code{ggplot}}
\usage{
plot2(
  .data,
  x = NULL,
  y = NULL,
  category = NULL,
  facet = NULL,
  type = NULL,
  x.title = TRUE,
  y.title = TRUE,
  category.title = NULL,
  title = NULL,
  subtitle = NULL,
  caption = NULL,
  tag = NULL,
  title.linelength = 60,
  title.colour = "black",
  subtitle.linelength = 60,
  subtitle.colour = "grey35",
  na.replace = "",
  na.rm = FALSE,
  facet.position = "top",
  facet.fill = NULL,
  facet.bold = TRUE,
  facet.italic = FALSE,
  facet.size = 10,
  facet.margin = 8,
  facet.repeat_lbls_x = TRUE,
  facet.repeat_lbls_y = TRUE,
  facet.fixed_y = NULL,
  facet.drop = FALSE,
  facet.nrow = NULL,
  facet.relative = FALSE,
  x.date_breaks = NULL,
  x.date_labels = NULL,
  category.focus = NULL,
  colour = "certe",
  colour_fill = NULL,
  colour_opacity = 0,
  x.lbl_angle = 0,
  x.lbl_align = NULL,
  x.lbl_italic = FALSE,
  x.lbl_taxonomy = FALSE,
  x.remove = FALSE,
  x.position = "bottom",
  x.max_items = Inf,
  x.max_txt = "(rest, x\%n)",
  category.max_items = Inf,
  category.max_txt = "(rest, x\%n)",
  facet.max_items = Inf,
  facet.max_txt = "(rest, x\%n)",
  x.breaks = NULL,
  x.n_breaks = NULL,
  x.trans = "identity",
  x.expand = NULL,
  x.limits = NULL,
  x.labels = NULL,
  x.character = NULL,
  x.drop = FALSE,
  x.zoom = FALSE,
  y.remove = FALSE,
  y.24h = FALSE,
  y.age = FALSE,
  y.scientific = NULL,
  y.percent = FALSE,
  y.percent_break = 0.1,
  y.breaks = NULL,
  y.n_breaks = NULL,
  y.limits = NULL,
  y.labels = NULL,
  y.expand = NULL,
  y.trans = "identity",
  y.position = "left",
  y.zoom = FALSE,
  category.labels = NULL,
  category.percent = FALSE,
  category.breaks = NULL,
  category.limits = NULL,
  category.expand = 0,
  category.midpoint = NULL,
  category.trans = "identity",
  x.sort = NULL,
  category.sort = TRUE,
  facet.sort = TRUE,
  datalabels = TRUE,
  datalabels.round = ifelse(y.percent, 2, 1),
  datalabels.format = "\%n",
  datalabels.colour = "grey25",
  datalabels.colour_fill = NULL,
  datalabels.size = (3 * text_factor),
  datalabels.angle = 0,
  decimal.mark = ",",
  big.mark = ifelse(decimal.mark == ",", ".", ","),
  summarise_function = base::sum,
  stacked = FALSE,
  stackedpercent = FALSE,
  horizontal = FALSE,
  reverse = horizontal,
  smooth = NULL,
  smooth.method = NULL,
  smooth.formula = NULL,
  smooth.se = TRUE,
  smooth.level = 0.95,
  smooth.alpha = 0.1,
  smooth.size = 0.75,
  smooth.linetype = 3,
  size = NULL,
  linetype = 1,
  binwidth = NULL,
  width = NULL,
  jitter_seed = NA,
  violin_scale = "count",
  legend.position = NULL,
  legend.title = NULL,
  legend.reverse = FALSE,
  legend.barheight = 6,
  legend.barwidth = 1.5,
  legend.nbin = 300,
  legend.italic = FALSE,
  zoom = FALSE,
  sep = " / ",
  print = FALSE,
  text_factor = 1,
  font = getOption("plot2.font"),
  theme = getOption("plot2.theme", "theme_minimal2"),
  background = "white",
  markdown = TRUE,
  ...
)
}
\arguments{
\item{.data}{data to plot}

\item{x}{plotting 'direction': the x axis}

\item{y}{values to use for plotting along the y axis - can also be \code{\link[=n]{n()}} for the row count or a calculation of a variable, e.g. \code{max(column1)}, \code{median(column2)} or \code{n_distinct(person_id)}}

\item{category}{plotting 'direction': the category (called 'fill' and 'colour' in \code{ggplot2})}

\item{facet}{plotting 'direction': the facet}

\item{type}{type of visualisation to use. This can be:
\itemize{
\item A \code{ggplot2} geom name, all geoms are supported (including \code{\link[ggplot2:geom_blank]{geom_blank()}}). Full function names can be used (e.g., \code{"geom_histogram"}), but they can also be abbreviated (e.g., \code{"h"}, \code{"hist"}). These geoms can be abbreviated by their first character: area (\code{"a"}), boxplot (\code{"b"}), column (\code{"c"}), histogram (\code{"h"}), jitter (\code{"j"}), line (\code{"l"}), point (\code{"p"}), ribbon (\code{"r"}), violin (\code{"v"}). \strong{Please note:} in \code{ggplot2}, 'bars' and 'columns' are equal, while it is common to many people that 'bars' are oriented horizontally and 'columns' are oriented vertically. For this reason, \code{type = "bar"} will set \code{type = "col"} and \code{horizontal = TRUE}.
\item A shortcut. There is currently one supported shortcut: \code{"barpercent"}, which will set \code{type = "col"} and \code{horizontal = TRUE} and \code{x.max_items = 10} and \code{x.sort = "freq-desc"} and \code{datalabels.format = "\%n (\%p)"}.
\item Left blank. In this case, the type will be determined automatically: \code{"boxplot"} if there is no X axis or if the length of unique values per X axis item is at least 3, \code{"point"} if both the Y and X axes are numeric, and the \link[=options]{option} \code{"plot2.default_type"} otherwise (which defaults to \code{"col"}). Use \code{type = "blank"} or \code{type = "geom_blank"} to \emph{not} print a geom.
}}

\item{title, subtitle, caption, tag, x.title, y.title, category.title, legend.title}{a title to use. This can be:
\itemize{
\item An \link{expression}, e.g. using \code{parse(text = "...")}
\item A \link{character}, which supports markdown by using \code{\link[=md_to_expression]{md_to_expression()}} internally if \code{markdown = TRUE}
\item A vector of characters and functions, which allows calculations over \code{.data} (see \emph{Examples})
}

\code{title} will be guessed with \code{\link[=get_plot_title]{get_plot_title()}} when left blank.

\code{category.title} defaults to \code{TRUE} if the legend items are numeric.}

\item{title.linelength}{maximum number of characters per line in the title, before a linebreak occurs}

\item{title.colour}{text colour of the title}

\item{subtitle.linelength}{maximum number of characters per line in the subtitle, before a linebreak occurs}

\item{subtitle.colour}{text colour of the subtitle}

\item{na.replace}{character to put in place of \code{NA} values if \code{na.rm = FALSE}}

\item{na.rm}{remove \code{NA} values from showing in the plot}

\item{facet.position, facet.fill, facet.bold, facet.italic, facet.size, facet.margin, facet.repeat_lbls_x, facet.repeat_lbls_y, facet.drop, facet.nrow, facet.relative}{additional settings for the plotting direction \code{facet}}

\item{facet.fixed_y}{a \link{logical} to indicate whether all y scales should have the same limits. Defaults to \code{TRUE} only if the \link[certestats:distribution_metrics]{coefficient of variation} (sd divided by mean) of the maximum values of y is less than 15\%.}

\item{x.date_breaks}{breaks to use when the x axis contains dates, will be determined automatically if left blank}

\item{x.date_labels}{labels to use when the x axis contains dates, will be determined automatically if left blank}

\item{category.focus}{a value of \code{category} that should be highlighted, meaning that all other values in \code{category} will be greyed out. This can also be a numeric value between 1 and the length of unique values of \code{category}, e.g. \code{category.focus = 2} to focus on the second legend item.}

\item{colour}{colour(s) to set, will be evaluated with \code{\link[certestyle:colourpicker]{colourpicker()}} and defaults to Certe colours. This can also be one of the viridis colours for a continuous scale: \code{"viridis"}, \code{"magma"}, \code{"inferno"}, \code{"plasma"}, \code{"cividis"}, \code{"rocket"}, \code{"mako"} or \code{"turbo"}. This can also be a named vector to match values of \code{category}, see \emph{Examples}. Using a named vector can also be used to manually sort the values of \code{category}.}

\item{colour_fill}{colour(s) to be used for filling, will be determined automatically if left blank and will be evaluated with \code{\link[certestyle:colourpicker]{colourpicker()}}}

\item{colour_opacity}{amount of opacity for \code{colour}/\code{colour_fill} (0 = solid, 1 = transparent)}

\item{x.lbl_angle}{angle to use for the x axis in a counter-clockwise direction (i.e., a value of \code{90} will orient the axis labels from bottom to top, a value of \code{270} will orient the axis labels from top to bottom)}

\item{x.lbl_align}{alignment for the x axis between \code{0} (left aligned) and \code{1} (right aligned)}

\item{x.lbl_italic}{\link{logical} to indicate whether the x labels should in in \emph{italics}}

\item{x.lbl_taxonomy}{a \link{logical} to transform all words of the \code{x} labels into italics that are in the \link[AMR:microorganisms]{microorganisms} data set of the \code{AMR} package. This uses \code{\link[=md_to_expression]{md_to_expression()}} internally and will set \code{x.labels} to parse expressions.}

\item{x.remove, y.remove}{a \link{logical} to indicate whether the axis labels and title should be removed}

\item{x.position, y.position}{position of the axis}

\item{x.max_items, category.max_items, facet.max_items}{number of maximum items to use, defaults to infinite. All other values will be grouped and summarised using the \code{summarise_function} function. \strong{Please note:} the sorting will be applied first, allowing to e.g. plot the top \emph{n} most frequent values of the x axis by combining \code{x.sort = "freq-desc"} with \verb{x.max_items =} \emph{n}.}

\item{x.max_txt, category.max_txt, facet.max_txt}{the text to use of values not included number of \verb{*.max_items}. The placeholder \verb{\%n} will be replaced with the outcome of the \code{summarise_function} function, the placeholder \verb{\%p} will be replaced with the percentage.}

\item{x.breaks, y.breaks}{a breaks function or numeric vector to use for the axis}

\item{x.n_breaks, y.n_breaks}{number of breaks, only useful if \code{x.breaks} cq. \code{y.breaks} is \code{NULL}}

\item{x.trans, y.trans}{a transformation function to use for the axis, e.g. \code{"log2"}}

\item{x.expand, y.expand}{\href{ggplot2::expansion()}{expansion} to use for the axis, can be length 1 or 2. \code{x.expand} defaults to 0.5 and \code{y.expand} defaults to \code{0.25}, except for sf objects (then both default to 0).}

\item{x.limits, y.limits}{limits to use for the axis, can be length 1 or 2. Use \code{NA} for the highest or lowest value in the data, e.g. \code{y.limits = c(0, NA)} to have the y scale start at zero.}

\item{x.labels, y.labels}{a labels function or character vector to use for the axis}

\item{x.character}{a \link{logical} to indicate whether the values of the x axis should be forced to \link{character}. The default is \code{FALSE}, except for years (x values between 2000 and 2050)}

\item{x.drop}{\link{logical} to indicate whether factor levels should be dropped}

\item{x.zoom, y.zoom}{a \link{logical} to indicate if the axis should be zoomed on the data, by setting \code{x.limits = c(NA, NA)} and \code{x.expand = 0} for the x axis, or \code{y.limits = c(NA, NA)} and \code{y.expand = 0} for the y axis}

\item{y.24h}{a \link{logical} to indicate whether the y labels and breaks should be formatted as 24-hour sequences}

\item{y.age}{a \link{logical} to indicate whether the y labels and breaks should be formatted as ages in years}

\item{y.scientific}{a \link{logical} to indicate whether the y labels should be formatted in scientific notation, using \code{\link[certestyle:format2]{format2_scientific()}}. Defaults to \code{TRUE} only if the range of the y values spans more than \code{10e5}.}

\item{y.percent}{a \link{logical} to indicate whether the y labels should be formatted as percentages}

\item{y.percent_break}{a value on which the y axis should have breaks}

\item{category.labels, category.percent, category.breaks, category.expand, category.midpoint, category.trans}{settings for the plotting direction \code{category}.}

\item{category.limits}{limits to use for a numeric category, can be length 1 or 2. Use \code{NA} for the highest or lowest value in the data, e.g. \code{category.limits = c(0, NA)} to have the scale start at zero.}

\item{x.sort, category.sort, facet.sort}{sorting of the plotting direction, defaults to \code{TRUE}, except for continuous values on the x axis (such as dates and numbers). Applying one of the sorting methods will transform the values to an ordered \link{factor}, which \code{ggplot2} uses to orient the data. Valid values are:
\itemize{
\item \code{TRUE}: sort \link{factor}s on their levels, otherwise sort ascending on alphabet, while maintaining numbers in the text (\emph{numeric} sort)
\item \code{FALSE}: sort according to the order in the data
\item \code{NULL}: do not sort/transform at all
\item \code{"asc"} or \code{"alpha"}: sort as \code{TRUE}
\item \code{"desc"}: sort \link{factor}s on their \link[=rev]{reversed} levels, otherwise sort descending on alphabet, while maintaining numbers in the text (\emph{numeric} sort)
\item \code{"order"} or \code{"inorder"}: sort as \code{FALSE}
\item \code{"freq"} or \code{"freq-desc"}: sort descending according to the frequencies of \code{y} computed by \code{summarise_function} (highest value first)
\item \code{"freq-asc"}: sort ascending according to the frequencies of \code{y} computed by \code{summarise_function} (lowest value first)
}}

\item{datalabels}{variables or character vector to use as datalabels - if left blank, will take the first character column in 'sf' data, and values of \code{y} otherwise. It will print a maximum of 50 labels at default, which can be enforced by explicitly adding \code{datalabels = TRUE}.}

\item{datalabels.round}{number of digits to round the datalabels, applies to both \code{"\%n"} and \code{"\%p"} for replacement (see \code{datalabels.format})}

\item{datalabels.format}{format to use for datalabels - \code{"\%n"} will be replaced by the count number, \code{"\%p"} will be replaced by the percentage of the total count. Use \code{datalabels.format = NULL} to not transform the datalabels.}

\item{datalabels.colour, datalabels.colour_fill, datalabels.size, datalabels.angle}{settings for the datalabels}

\item{decimal.mark}{decimal mark, defaults to Dutch use (a comma)}

\item{big.mark}{thousands separator, defaults to Dutch use (a full stop)}

\item{summarise_function}{a \link{function} to use if the data has to be summarised, see \emph{Examples}}

\item{stacked}{a \link{logical} to indicate that values must be stacked}

\item{stackedpercent}{a \link{logical} to indicate that values must be 100\% stacked}

\item{horizontal}{a \link{logical} to turn the plot 90 degrees using \code{\link[ggplot2:coord_flip]{coord_flip()}}. This option also updates some theme options, so that e.g., \code{x.lbl_italic} will still apply to the original x axis.}

\item{reverse}{a \link{logical} to reverse the \emph{values} of \code{category}. Use \code{legend.reverse} to reverse the \emph{legend} of \code{category}.}

\item{smooth}{a \link{logical} to add a smooth. In histograms, this will add the density count as an overlaying line (default: \code{TRUE}). In all other cases, a smooth will be added using \code{\link[ggplot2:geom_smooth]{geom_smooth()}} (default: \code{FALSE}).}

\item{smooth.method, smooth.formula, smooth.se, smooth.level, smooth.alpha, smooth.size, smooth.linetype}{settings for \code{smooth}}

\item{size}{size of the geom}

\item{linetype}{linetype of the geom, only suitable for geoms that draw lines}

\item{binwidth}{width of bins (only useful for \code{geom = "histogram"}), can be specified as a numeric value or as a function that calculates width from \code{x}, see \code{\link[ggplot2:geom_histogram]{geom_histogram()}}. It defaults to approx. \code{diff(range(x))} divided by 12 to 22 based on the data.}

\item{width}{width of the geom}

\item{jitter_seed}{seed (randomisation factor) to be set when using \code{type = "jitter"}}

\item{violin_scale}{scale to be set when using \code{type = "violin"}, can also be set to \code{"area"}}

\item{legend.position}{position of the legend, must be \code{"top"}, \code{"right"}, \code{"bottom"}, \code{"left"} or \code{"none"} (or \code{NA} or \code{NULL}), can be abbreviated. Defaults to \code{"right"} for numeric \code{category} values and 'sf' plots, and \code{"top"} otherwise.}

\item{legend.reverse, legend.barheight, legend.barwidth, legend.nbin, legend.italic}{other settings for the legend}

\item{zoom}{a \link{logical} to indicate if the plot should be scaled to the data, i.e., not having the x and y axes to start at 0. This will set \code{x.zoom = TRUE} and \code{y.zoom = TRUE}.}

\item{sep}{separator character to use if multiple columns are given to either of the three directions: \code{x}, \code{category} and \code{facet}, e.g. \code{facet = c(column1, column2)}}

\item{print}{a \link{logical} to indicate if the result should be \link[=print]{printed} instead of just returned}

\item{text_factor}{text factor to use, which will apply to all texts shown in the plot}

\item{font}{font (family) to use, can be set with \code{options(plot2.font = "...")}. Can be any installed system font or any of the > 1000 font names from \href{https://fonts.google.com}{Google Fonts}.}

\item{theme}{a valid \code{ggplot2} \link[ggplot2:theme]{theme} to apply, or \code{NULL} to use the default \code{\link[ggplot2:ggtheme]{theme_grey()}}. This argument accepts themes (e.g., \code{theme_bw()}), functions (e.g., \code{theme_bw}) and characters themes (e.g., \code{"theme_bw"}). Can be set with \code{options(plot2.theme = "...")}.}

\item{background}{the background colour of the entire plot, can also be \code{NA} to remove it. Only applies when \code{theme} is not empty.}

\item{markdown}{a \link{logical} to turn all labels and titles into \link{plotmath} expressions, by converting common markdown language using the \code{\link[=md_to_expression]{md_to_expression()}} function (defaults to \code{TRUE})}

\item{...}{arguments passed on to methods}
}
\value{
a \code{ggplot} object
}
\description{
The \code{\link[=plot2]{plot2()}} function is a convenient wrapper around many \code{\link[ggplot2:ggplot]{ggplot2}} functions. By design, the \code{ggplot2} package requires users to use a lot of functions, while the \code{\link[=plot2]{plot2()}} function auto-determines needs and only requires to define arguments in one single function.

See \link{plot2-methods} for all implemented methods for different object classes.
}
\details{
The \code{\link[=plot2]{plot2()}} function is a convenient wrapper around many \code{\link[ggplot2:ggplot]{ggplot2}} functions such as \code{\link[ggplot2:ggplot]{ggplot()}}, \code{\link[ggplot2:aes]{aes()}}, \code{\link[ggplot2:geom_bar]{geom_col()}}, \code{\link[ggplot2:facet_wrap]{facet_wrap()}}, \code{\link[ggplot2:labs]{labs()}}, etc., and provides:
\itemize{
\item Writing as few lines of codes as possible
\item Easy plotting in three 'directions': \code{x} (the regular x axis), \code{category} (replaces 'fill' and 'colour') and \code{facet}
\item Automatic setting of these 'directions' based on the input data
\item Setting in-place calculations for all plotting directions and even \code{y}
\item Easy way for sorting data in many ways (such as on alphabet, numeric value, frequency, original data order), by setting a single argument for the 'direction': \code{x.sort}, \code{category.sort} and \code{facet.sort}
\item Easy limiting values, e.g. by setting \code{x.max_items = 5} or \code{category.max_items = 5}
\item Markdown support for any title text, with any theme
\item Integrated support for any Google Font and any installed system font
\item An extra clean, minimalistic theme with a lot of whitespace (but without unnecessary margins) that is ideal for printing: \code{theme_minimal2()}
\item Some conveniences from Microsoft Excel:
\itemize{
\item The y axis starts at 0 if possible
\item The y scale expands at the top to be better able to interpret all data points
\item Date breaks can be written in a human-readable format (such as "d mmm yyyy")
\item Labels with data values can easily be printed and are automatically determined
}
\item Support for any \code{ggplot2} extension based on \code{\link[ggplot2:fortify]{ggplot2::fortify()}}
}

The \code{ggplot2} package in conjunction with the \code{tidyr}, \code{forcats} and \code{cleaner} packages can provide above functionalities, but the goal of the \code{\link[=plot2]{plot2()}} function is to generalise this into one function. The generic \code{\link[=plot2]{plot2()}} function currently has 125 arguments, all with a default value. \strong{Less typing, faster coding.}
}
\examples{
head(iris)

# no variables determined, so plot2() will try for itself -
# the type will be points since the first two variables are numeric
iris |>
  plot2()

# ggplot2 defaults (more or less):
iris |> 
  plot2(theme = NULL,
        zoom = TRUE,
        legend.title = TRUE,
        legend.position = "right")

# if x and y are set, no additional mapping will be set:
iris |> 
  plot2(Sepal.Width, Sepal.Length)
iris |> 
  plot2(Species, Sepal.Length)

# the arguments are in this order: x, y, category, facet
iris |> 
  plot2(Sepal.Length, Sepal.Width, Petal.Length, Species)

iris |> 
  plot2(Sepal.Length, Sepal.Width, Petal.Length, Species,
        colour = "viridis") # set the viridis colours
      
iris |> 
  plot2(Sepal.Length, Sepal.Width, Petal.Length, Species,
        colour = c("white", "red", "black"), # set own colours
        background = NA,
        facet.fill = NA)
  
admitted_patients

# the arguments are in this order: x, y, category, facet
admitted_patients |>
  plot2(hospital, age)

admitted_patients |>
  plot2(hospital, age, gender)
  
admitted_patients |>
  plot2(hospital, age, gender, ward)
  
# or use any function for y
admitted_patients |>
  plot2(hospital, median(age), gender, ward)
admitted_patients |>
  plot2(hospital, n(), gender, ward)

admitted_patients |>
  plot2(x = hospital,
        y = age,
        category = gender,
        colour = c("F" = "#3F681C", "M" = "#375E97"),
        colour_fill = "#FFBB00AA",
        size = 1.25,
        y.age = TRUE)

admitted_patients |>
  plot2(age, type = "hist")

# even titles support calculations, including support for {glue}
admitted_patients |>
  plot2(age, type = "hist",
        title = paste("Based on n =", n_distinct(patient_id), "patients"),
        subtitle = paste("Total rows:", n()),
        caption = glue::glue("From {n_distinct(hospital)} hospitals"),
        x.title = paste("Age ranging from", paste(range(age), collapse = " to ")))
 
# the default type is column, datalabels are automatically
# set in non-continuous types:
admitted_patients |> 
  plot2(hospital, n(), gender)
  
admitted_patients |> 
  plot2(hospital, n(), gender,
        stacked = TRUE)
        
admitted_patients |> 
  plot2(hospital, n(), gender,
        stackedpercent = TRUE)
 
# sort on any direction:       
admitted_patients |> 
  plot2(hospital, n(), gender,
        x.sort = "freq-asc",
        stacked = TRUE)

# plot2() supports all S3 extensions available through
# ggplot2::fortify(), such as regression models:
lm(mpg ~ hp, data = mtcars) |> 
  plot2(x = mpg ^ -3,
        y = hp ^ 2,
        smooth = TRUE,
        smooth.method = "lm",
        smooth.formula = "y ~ log(x)",
        title = "Titles/captions *support* **markdown**",
        subtitle = "Axis titles contain the square notation: x^2")

# plot2() also has various other S3 implementations:

# QC plots, according to e.g. Nelson's Quality Control Rules
if (require("certestats", warn.conflicts = FALSE)) {
  rnorm(250, mean = 10, sd = 1) |> 
    qc_test() |> 
    plot2()
}
        
# sf objects (geographic plots, 'simple features') are also supported
if (require("sf")) {
  netherlands |> 
    plot2(datalabels = paste0(province, "\n", round(area_km2)))
}

# Antimicrobial resistance (AMR) data analysis
if (require("AMR")) {
  options(AMR_locale = "nl")
  
  example_isolates[, c("mo", penicillins())] |> 
    bug_drug_combinations(FUN = mo_gramstain) |>
    plot2(y.percent_break = 0.25)
}
}
