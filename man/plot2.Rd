% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot2.R
\name{plot2}
\alias{plot2}
\title{Conveniently Create a New \code{ggplot}}
\usage{
plot2(
  .data,
  x = NULL,
  y = NULL,
  category = NULL,
  facet = NULL,
  geom = NULL,
  x.title = NULL,
  y.title = NULL,
  title = NULL,
  subtitle = NULL,
  caption = NULL,
  tag = NULL,
  title.linelength = 60,
  title.colour = "black",
  subtitle.linelength = 60,
  subtitle.colour = "grey35",
  na.replace = "(??)",
  na.rm = FALSE,
  facet.position = "top",
  facet.fill = NULL,
  facet.bold = TRUE,
  facet.italic = FALSE,
  facet.size = 10,
  facet.margin = 8,
  facet.repeat_lbls_x = TRUE,
  facet.repeat_lbls_y = FALSE,
  facet.fixed_y = FALSE,
  facet.drop = FALSE,
  facet.nrow = NULL,
  facet.relative = FALSE,
  x.date_breaks = NULL,
  x.date_labels = NULL,
  category.focus = NULL,
  colour = "certe",
  colour_fill = NULL,
  x.lbl_angle = 0,
  x.lbl_align = NULL,
  x.lbl_italic = FALSE,
  x.remove = FALSE,
  x.position = "bottom",
  x.max_items = Inf,
  x.max_txt = "(rest, x \%n)",
  category.max_items = Inf,
  category.max_txt = "(rest, x \%n)",
  facet.max_items = Inf,
  facet.max_txt = "(rest, x \%n)",
  x.breaks = NULL,
  x.breaks_n = NULL,
  x.trans = "identity",
  x.expand = 0.5,
  x.limits = NULL,
  x.character = NULL,
  y.remove = FALSE,
  y.24h = FALSE,
  y.age = FALSE,
  y.percent = FALSE,
  y.percent_break = 10,
  y.breaks = NULL,
  y.limits = NULL,
  y.labels = NULL,
  y.expand = 0.25,
  y.trans = "identity",
  y.position = "left",
  category.labels = NULL,
  category.percent = FALSE,
  category.breaks = NULL,
  category.limits = NULL,
  category.expand = 0,
  category.midpoint = NULL,
  category.trans = "identity",
  x.sort = NULL,
  category.sort = TRUE,
  facet.sort = TRUE,
  datalabels = TRUE,
  datalabels.round = ifelse(y.percent, 2, 1),
  datalabels.format = "\%n",
  datalabels.colour = "grey25",
  datalabels.fill = NULL,
  datalabels.size = (3 * text_factor),
  datalabels.angle = 0,
  decimal.mark = ",",
  big.mark = ifelse(decimal.mark == ",", ".", ","),
  summarise_function = base::sum,
  stacked = FALSE,
  stackedpercent = FALSE,
  horizontal = FALSE,
  reverse = horizontal,
  smooth = FALSE,
  smooth.method = NULL,
  smooth.formula = NULL,
  smooth.se = TRUE,
  smooth.level = 0.95,
  smooth.alpha = 0.15,
  smooth.size = 0.75,
  smooth.linetype = 3,
  size = NULL,
  linetype = 1,
  bins = NULL,
  width = NULL,
  jitter_seed = NA,
  violin_scale = "count",
  legend.position = "top",
  legend.title = NULL,
  legend.reverse = FALSE,
  legend.barheight = 6,
  legend.barwidth = 1.5,
  legend.nbin = 300,
  legend.italic = FALSE,
  zoom = FALSE,
  sep = "/",
  print = FALSE,
  text_factor = 1,
  family = "Calibri",
  theme = theme_minimal2(),
  markdown = TRUE,
  x.category = NULL,
  y.category = NULL,
  ...
)
}
\arguments{
\item{.data}{data to plot}

\item{x}{plotting 'direction': the x axis}

\item{y}{values to use for plotting along the y axis}

\item{category}{plotting 'direction': the category (called 'fill' and 'colour' in \code{ggplot2})}

\item{facet}{plotting 'direction': the facet}

\item{geom}{type of visualisation to use, supports all \code{ggplot2} geoms. It will be determined automatically if left blank.

In \code{ggplot2}, 'bars' and 'columns' are equal, while it is common to many people that bars are horizontal and columns are vertical. For this reason, \code{geom = "bar"} will set \code{geom = "col"} and \code{horizontal = TRUE}.

There is one special case: the shortcut \code{geom = "barpercent"}, which will set \code{geom = "col"} and \code{horizontal = TRUE} and \code{x.max_items = 10} and \verb{x.sort = "freq-desc} and \code{datalabels.format = "\%n (\%p)"}.}

\item{x.title}{text to show on the x asis}

\item{y.title}{text to show on the y asis}

\item{title}{title to show}

\item{subtitle}{subtitle to show}

\item{caption}{caption to show}

\item{tag}{tag to show}

\item{title.linelength}{maximum number of characters per line in the title, before a linebreak occurs}

\item{title.colour}{text colour of the title}

\item{subtitle.linelength}{maximum number of characters per line in the subtitle, before a linebreak occurs}

\item{subtitle.colour}{text colour of the subtitle}

\item{na.replace}{character to put in place of \code{NA} values if \code{na.rm = FALSE}}

\item{na.rm}{remove \code{NA} values from showing in the plot}

\item{facet.position}{text}

\item{facet.fill}{text}

\item{facet.bold}{text}

\item{facet.italic}{text}

\item{facet.size}{text}

\item{facet.margin}{text}

\item{facet.repeat_lbls_x}{text}

\item{facet.repeat_lbls_y}{text}

\item{facet.fixed_y}{text}

\item{facet.drop}{text}

\item{facet.nrow}{text}

\item{facet.relative}{text}

\item{x.date_breaks}{text}

\item{x.date_labels}{text}

\item{category.focus}{text}

\item{colour}{text}

\item{colour_fill}{text}

\item{x.lbl_angle}{text}

\item{x.lbl_align}{text}

\item{x.lbl_italic}{text}

\item{x.remove}{text}

\item{x.position}{text}

\item{x.max_items}{text}

\item{x.max_txt}{text}

\item{category.max_items}{text}

\item{category.max_txt}{text}

\item{facet.max_items}{text}

\item{facet.max_txt}{text}

\item{x.breaks}{text}

\item{x.breaks_n}{text}

\item{x.trans}{text}

\item{x.expand}{text}

\item{x.limits}{text}

\item{x.character}{text}

\item{y.remove}{text}

\item{y.24h}{text}

\item{y.age}{text}

\item{y.percent}{text}

\item{y.percent_break}{text}

\item{y.breaks}{text}

\item{y.limits}{text}

\item{y.labels}{text}

\item{y.expand}{text}

\item{y.trans}{text}

\item{y.position}{text}

\item{category.labels, category.percent, category.breaks, category.limits, category.expand, category.midpoint, category.trans}{settings for the plotting direction \code{category}}

\item{x.sort, category.sort, facet.sort}{sorting of the plotting direction, defaults to \code{TRUE}, except for continuous values on the x axis (such as dates and numbers). Applying one of the sorting methods will transform the values to an ordered \link{factor}, which \code{ggplot2} uses to orient the data. Valid values are:
\itemize{
\item \code{TRUE}: sort \link{factor} on their levels, otherwise sort as \code{"asc"}
\item \code{FALSE}: keep order as it is in the data
\item \code{NULL}: do not sort/transform at all
\item \code{"asc"} or \code{"alpha"}: sort ascending on alphabet, while maintaining numbers in the text (\emph{numeric} sort)
\item \code{"desc"}: sort descending on alphabet, while maintaining numbers in the text (\emph{numeric} sort)
\item \code{"order"} or \code{"inorder"}: sort as \code{FALSE}
\item \code{"freq"} or \code{"freq-desc"}: sort descending according to the frequencies of \code{y} computed by \code{summarise_function} (highest value first)
\item \code{"freq-asc"}: sort ascending according to the frequencies of \code{y} computed by \code{summarise_function} (loewest value first)
}}

\item{datalabels}{variables or character vector to use as datalabels - if left blank, will take the first character column in 'sf' plots, and values of \code{y} otherwise}

\item{datalabels.round}{number of digits to round the datalabels}

\item{datalabels.format}{format to use for datalabels - \code{"\%n"} will be replaced by the count number, \code{"\%p"} will be replaced by the percentage of the total count. Use \code{datalabels.format = NULL} to not transform the datalabels.}

\item{datalabels.colour, datalabels.fill, datalabels.size, datalabels.angle}{settings for the datalabels}

\item{decimal.mark}{decimal mark, defaults to Dutch use (a comma)}

\item{big.mark}{thousands separator, defaults to Dutch use (a full stop)}

\item{summarise_function}{a \link{function} to use if the data has to be summarised, see \emph{Examples}}

\item{stacked}{text}

\item{stackedpercent}{text}

\item{horizontal}{a \link{logical} to turn the plot 90 defrees using \code{\link[ggplot2:coord_flip]{coord_flip()}}}

\item{reverse}{a \link{logical} to reverse all values on the x axis}

\item{smooth}{a \link{logical} to add a smooth using \code{\link[ggplot2:geom_smooth]{geom_smooth()}}}

\item{smooth.method, smooth.formula, smooth.se, smooth.level, smooth.alpha, smooth.size, smooth.linetype}{settings for \code{smooth}}

\item{size}{size of the geom}

\item{linetype}{linetype of the geom, only suitable for geoms that draw lines}

\item{bins}{number of bins, only useful for \code{geom = "histogram"}}

\item{width}{width of the geom}

\item{jitter_seed}{seed (randomisation factor) to be set when using \code{geom = "jitter"}}

\item{violin_scale}{scale to be set when using \code{geom = "violin"}, can also be set to \code{"area"}}

\item{legend.position, legend.title, legend.reverse, legend.barheight, legend.barwidth, legend.nbin, legend.italic}{settings for the legend}

\item{zoom}{a \link{logical} to indicate if the plot should be scaled to the data, i.e., not having the x and y axes to start at 0}

\item{sep}{separator character to use if multiple columns are given to either of the three directions: \code{x}, \code{category} and \code{facet}, e.g. \code{facet = c(column1, column2)}}

\item{print}{a \link{logical} to indicate if the result should be \link[=print]{printed} instead of just returned}

\item{text_factor}{text factor to use, which will apply to all texts shown in the plot}

\item{family}{font family to use}

\item{theme}{a valid \code{ggplot2} \link[ggplot2:theme]{theme} to apply, or \code{NULL} to use the default \code{\link[ggplot2:ggtheme]{theme_grey()}}}

\item{markdown}{text}

\item{x.category}{old argument for \code{facet}, now deprecated}

\item{y.category}{old argument for \code{category}, now deprecated}

\item{...}{arguments passed on to methods}
}
\value{
The \code{\link[=plot2]{plot2()}} function adds new variables to the data for each mapping: any combination of \verb{_var_x}, \verb{_var_y}, \verb{_var_category}, \verb{_var_facet}. These columns are internally set as mapping with \code{\link[ggplot2:aes]{aes()}}.
}
\description{
The \code{\link[=plot2]{plot2()}} function is a convenient wrapper around many \code{\link[ggplot2:ggplot]{ggplot2}} functions. By design, the \code{ggplot2} package requires users to use a lot of functions, while the \code{\link[=plot2]{plot2()}} function auto-determines needs and only requires to define arguments in one single function.

See \link{plot2-methods} for all implemented methods for different object classes.
}
\details{
The \code{\link[=plot2]{plot2()}} function is a convenient wrapper around many \code{\link[ggplot2:ggplot]{ggplot2}} functions such as \code{\link[ggplot2:ggplot]{ggplot()}}, \code{\link[ggplot2:aes]{aes()}}, \code{\link[ggplot2:geom_bar]{geom_col()}}, \code{\link[ggplot2:facet_wrap]{facet_wrap()}}, \code{\link[ggplot2:labs]{labs()}}, etc., and provides:
\itemize{
\item Writing as few lines of codes as possible
\item Easy plotting in three 'directions': \code{x} (the regular x axis), \code{category} (replaces 'fill' and 'colour') and \code{facet}
\item Automatic setting of these 'directions' based on the input data
\item Easy way for sorting data in many ways (such as on alphabet, numeric value, frequency, original data order), by setting a single argument for the 'direction': \code{x.sort}, \code{category.sort} and \code{facet.sort}
\item Easy limiting values, e.g. by setting \code{x.max_items = 5} or \code{category.max_items = 5}
\item Markdown support for any label, with any theme
\item An extra clean, minimalistic theme with a lot of whitespace (but without unnecessary margins) that is ideal for printing: \code{\link[=theme_minimal2]{theme_minimal2()}}
\item Some conveniences from Microsoft Excel:
\itemize{
\item The y axis starts at 0 if possible
\item The y scale expands at the top to be better able to interpret all data points
\item Date breaks can be written in a human-readable format (such as "d mmm yyyy")
\item Labels with data values can easily be printed and are automatically determined
}
\item Support for any \code{ggplot2} extension based on \code{\link[ggplot2:fortify]{ggplot2::fortify()}}
}

The \code{ggplot2} package in conjunction with the \code{tidyr}, \code{forcats} and \code{cleaner} packages can provide above functionalities, but the goal of the \code{\link[=plot2]{plot2()}} function is to generalise this into one function. For \link{data.frame}s, \code{\link[=plot2]{plot2()}} currently has 117 arguments, all with a default value. \strong{Less typing, faster coding.}
}
\examples{
head(iris)

# no variables determined, so plot2() will try for itself -
# the geom will be points since the first two variables are numeric
plot2(iris)

# only view the data part, like ggplot2 normally does
plot2(iris, zoom = TRUE)

# if x and y are set, no addition mapping will be set:
plot2(iris, Sepal.Width, Sepal.Length)
plot2(iris, Species, Sepal.Length)

# the arguments are in this order: x, y, category, facet
plot2(iris, Sepal.Length, Sepal.Width, Petal.Length, Species)

plot2(iris, Sepal.Length, Sepal.Width, Petal.Length, Species,
      colour = "viridis") # set the viridis colours
      
plot2(iris, Sepal.Length, Sepal.Width, Petal.Length, Species,
      colour = c("white", "red", "black")) # set own colours
      
plot2(iris, Sepal.Length, Sepal.Width, Petal.Length, Species,
      colour = c("white", "red", "black"), # set own colours
      category.midpoint = 3)               # with an own midpoint

# change to any geom
plot2(iris, Species, Sepal.Length, geom = "violin")

library(dplyr, warn.conflicts = FALSE)
  
head(admitted_patients)

# if there are more Y values than groups, the default will be boxplot
admitted_patients \%>\%
  plot2(x = hospital)

# the arguments are in this order: x, y, category, facet
admitted_patients \%>\%
  plot2(hospital, age, gender)
  
admitted_patients \%>\%
  plot2(hospital, age, gender, ward)
  
# use summarise_function to apply a function for continuous data
admitted_patients \%>\%
  plot2(hospital, age, gender, ward,
        geom = "col", summarise_function = median)

admitted_patients \%>\%
  plot2(x = hospital,
        category = gender,
        colour = c("F" = "orange3", "M" = "purple3"),
        colour_fill = "white",
        y.age = TRUE)
        
admitted_patients \%>\%
  plot2(age, geom = "hist")
admitted_patients \%>\%
  plot2(age, geom = "density")
 
# the default geom is column, datalabels are automatically
# set in non-continuous geoms:
patients_per_hospital_gender <- admitted_patients \%>\%
  count(hospital, gender)
  
head(patients_per_hospital_gender)
  
patients_per_hospital_gender \%>\%
  plot2()
  
patients_per_hospital_gender \%>\%
  plot2(stacked = TRUE)
  
patients_per_hospital_gender \%>\%
  plot2(stackedpercent = TRUE)
  
# sort any direction
patients_per_hospital_gender \%>\%
  plot2(category.sort = "desc")
  
patients_per_hospital_gender \%>\%
  plot2(category.sort = "desc",
        x.sort = "freq-asc",
        stacked = TRUE)

# plot2() supports all S3 extensions available through ggplot2::fortify():
mtcars \%>\% 
  lm(mpg ~ hp, data = .) \%>\% 
  plot2(x = mpg ^ 2,
        y = hp ^ 3,
        smooth = TRUE,
        title = "Titles/captions *support* **markdown**",
        subtitle = "Axis titles contain the square notation: ^2")
        
# sf objects (geographic plots, 'simple features') are also supported
if (require("sf")) {
  netherlands \%>\% 
    plot2(datalabels = TRUE)
}
}
